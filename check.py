# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from sqlite3 import Time
import Data
from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
from PyQt5.QtWidgets import QApplication,QTableWidgetItem
import sys
import funcs
import time
import threading
from asyncio import run
from random import random
from tracemalloc import start
from bs4 import BeautifulSoup
import requests
import random
import math




class Ui_MainWindow(object):
    titles = []
    authors = []
    dates=[]
    publishers=[]
    isbns = []
    languages=[]
    waiting_peoples=[]
    
    article_titles=[]
    article_author=[]
    Journal_Citations=[]
    PMIDs=[]
    links = []

    Books=[]
    Articles=[]
    
    runtime = 0
    Progress = 0
    Stop = 0

    Resume = 1
    SubResume = 1
    category_text = "Select Category"
    def setupUi(self, MainWindow):
        Previous='empty'
        count=0
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1109, 813)
        MainWindow.setMinimumSize(QtCore.QSize(900, 500))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.frame.setFont(font)
        self.frame.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.frame.setMouseTracking(False)
        self.frame.setTabletTracking(False)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setMinimumSize(QtCore.QSize(200, 0))
        self.frame_3.setMaximumSize(QtCore.QSize(30, 16777215))
        self.frame_3.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_4 = QtWidgets.QFrame(self.frame_3)
        self.frame_4.setMaximumSize(QtCore.QSize(16777215, 400))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_6 = QtWidgets.QFrame(self.frame_4)
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout_2.addWidget(self.frame_6)
        self.frame_7 = QtWidgets.QFrame(self.frame_4)
        self.frame_7.setMinimumSize(QtCore.QSize(150, 60))
        self.frame_7.setMaximumSize(QtCore.QSize(16777215, 100))
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.frame_7)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setSpacing(0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.frame_58 = QtWidgets.QFrame(self.frame_7)
        self.frame_58.setMinimumSize(QtCore.QSize(130, 0))
        self.frame_58.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_58.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_58.setObjectName("frame_58")
        self.label = QtWidgets.QLabel(self.frame_58)
        self.label.setGeometry(QtCore.QRect(0, 0, 131, 91))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/newPrefix/untitled_page.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.horizontalLayout_9.addWidget(self.frame_58)
        self.frame_59 = QtWidgets.QFrame(self.frame_7)
        self.frame_59.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_59.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_59.setObjectName("frame_59")
        self.horizontalLayout_9.addWidget(self.frame_59)
        self.horizontalLayout_2.addWidget(self.frame_7)
        self.frame_8 = QtWidgets.QFrame(self.frame_4)
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.horizontalLayout_2.addWidget(self.frame_8)
        self.verticalLayout.addWidget(self.frame_4)
        self.frame_5 = QtWidgets.QFrame(self.frame_3)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.frame_10 = QtWidgets.QFrame(self.frame_5)
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.horizontalLayout_3.addWidget(self.frame_10)
        self.frame_11 = QtWidgets.QFrame(self.frame_5)
        self.frame_11.setMinimumSize(QtCore.QSize(180, 0))
        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_11)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_14 = QtWidgets.QFrame(self.frame_11)
        self.frame_14.setMaximumSize(QtCore.QSize(16777215, 50))
        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_14.setObjectName("frame_14")
        self.label_2 = QtWidgets.QLabel(self.frame_14)
        self.label_2.setGeometry(QtCore.QRect(30, 0, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.frame_14)
        self.frame_13 = QtWidgets.QFrame(self.frame_11)
        self.frame_13.setMaximumSize(QtCore.QSize(16777215, 50))
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.label_3 = QtWidgets.QLabel(self.frame_13)
        self.label_3.setGeometry(QtCore.QRect(0, 0, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_2.addWidget(self.frame_13)
        self.frame_12 = QtWidgets.QFrame(self.frame_11)
        self.frame_12.setMaximumSize(QtCore.QSize(16777215, 50))
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.label_5 = QtWidgets.QLabel(self.frame_12)
        self.label_5.setGeometry(QtCore.QRect(0, 0, 171, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_2.addWidget(self.frame_12)
        self.frame_20 = QtWidgets.QFrame(self.frame_11)
        self.frame_20.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_20.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_20.setObjectName("frame_20")
        self.label_6 = QtWidgets.QLabel(self.frame_20)
        self.label_6.setGeometry(QtCore.QRect(30, 0, 101, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_2.addWidget(self.frame_20)
        self.horizontalLayout_3.addWidget(self.frame_11)
        self.frame_9 = QtWidgets.QFrame(self.frame_5)
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.horizontalLayout_3.addWidget(self.frame_9)
        self.verticalLayout.addWidget(self.frame_5)
        self.horizontalLayout.addWidget(self.frame_3)
        self.frame_2 = QtWidgets.QFrame(self.frame)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.frame_2.setFont(font)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setSpacing(0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.frame_2)
        self.tabWidget.setMinimumSize(QtCore.QSize(640, 0))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.tabWidget.setFont(font)
        self.tabWidget.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setStyleSheet("\n"
"background-color: rgb(121, 121, 121);")
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.tabWidget.setIconSize(QtCore.QSize(30, 30))
        self.tabWidget.setElideMode(QtCore.Qt.ElideNone)
        self.tabWidget.setDocumentMode(True)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(True)
        self.tabWidget.setTabBarAutoHide(True)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.tab_3)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setSpacing(0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.frame_42 = QtWidgets.QFrame(self.tab_3)
        self.frame_42.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_42.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_42.setObjectName("frame_42")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.frame_42)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.frame_81 = QtWidgets.QFrame(self.frame_42)
        self.frame_81.setMinimumSize(QtCore.QSize(0, 50))
        self.frame_81.setStyleSheet("background-color: rgb(170, 170, 170);")
        self.frame_81.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_81.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_81.setObjectName("frame_81")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.frame_81)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frame_44 = QtWidgets.QFrame(self.frame_81)
        self.frame_44.setMinimumSize(QtCore.QSize(0, 50))
        self.frame_44.setMaximumSize(QtCore.QSize(16777215, 120))
        self.frame_44.setStyleSheet("background-color: rgb(113, 113, 113);")
        self.frame_44.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_44.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_44.setObjectName("frame_44")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.frame_44)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.frame_47 = QtWidgets.QFrame(self.frame_44)
        self.frame_47.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_47.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_47.setObjectName("frame_47")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.frame_47)
        self.horizontalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_14.setSpacing(0)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.frame_48 = QtWidgets.QFrame(self.frame_47)
        self.frame_48.setMinimumSize(QtCore.QSize(0, 50))
        self.frame_48.setMaximumSize(QtCore.QSize(16777215, 60))
        self.frame_48.setStyleSheet("background-color: rgb(113, 113, 113);")
        self.frame_48.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_48.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_48.setObjectName("frame_48")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_48)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.frame_49 = QtWidgets.QFrame(self.frame_48)
        self.frame_49.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_49.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_49.setObjectName("frame_49")
        self.horizontalLayout_6.addWidget(self.frame_49)
        self.frame_50 = QtWidgets.QFrame(self.frame_48)
        self.frame_50.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_50.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_50.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_50.setObjectName("frame_50")
        self.searching_categoty = QtWidgets.QComboBox(self.frame_50)
        self.searching_categoty.setGeometry(QtCore.QRect(0, 10, 211, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.searching_categoty.setFont(font)
        self.searching_categoty.setObjectName("searching_categoty")
        self.searching_categoty.addItem("")
        self.searching_categoty.addItem("")
        self.searching_categoty.addItem("")
        self.searching_categoty.currentTextChanged.connect(self.onsearching_category_change)
        self.horizontalLayout_6.addWidget(self.frame_50)
        self.frame_51 = QtWidgets.QFrame(self.frame_48)
        self.frame_51.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_51.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_51.setObjectName("frame_51")
        self.horizontalLayout_6.addWidget(self.frame_51)
        self.frame_52 = QtWidgets.QFrame(self.frame_48)
        self.frame_52.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_52.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_52.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_52.setObjectName("frame_52")
        self.searching_algorithm = QtWidgets.QComboBox(self.frame_52)
        self.searching_algorithm.setGeometry(QtCore.QRect(10, 10, 201, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.searching_algorithm.setFont(font)
        self.searching_algorithm.setStyleSheet("")
        self.searching_algorithm.setObjectName("searching_algorithm")
        self.searching_algorithm.addItem("")
        self.searching_algorithm.addItem("")
        self.searching_algorithm.addItem("")
        self.searching_algorithm.addItem("")
        self.searching_algorithm.currentTextChanged.connect(self.enableentity1)
        self.horizontalLayout_6.addWidget(self.frame_52)
        self.frame_53 = QtWidgets.QFrame(self.frame_48)
        self.frame_53.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_53.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_53.setObjectName("frame_53")
        self.horizontalLayout_6.addWidget(self.frame_53)
        self.frame_54 = QtWidgets.QFrame(self.frame_48)
        self.frame_54.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_54.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_54.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_54.setObjectName("frame_54")
        self.searching_entity1 = QtWidgets.QComboBox(self.frame_54)
        self.searching_entity1.setGeometry(QtCore.QRect(10, 10, 201, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.searching_entity1.setFont(font)
        self.searching_entity1.setObjectName("searching_entity1")
        self.searching_entity1.addItem("")
        self.searching_entity1.addItem("")
        self.searching_entity1.addItem("")
        self.searching_entity1.addItem("")
        self.searching_entity1.addItem("")
        self.searching_entity1.addItem("")
        self.searching_entity1.addItem("")
        self.searching_entity1.addItem("")
        self.searching_entity1.addItem("")
        self.horizontalLayout_6.addWidget(self.frame_54)
        self.frame_55 = QtWidgets.QFrame(self.frame_48)
        self.frame_55.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_55.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_55.setObjectName("frame_55")
        self.horizontalLayout_6.addWidget(self.frame_55)
        self.frame_60 = QtWidgets.QFrame(self.frame_48)
        self.frame_60.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_60.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_60.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_60.setObjectName("frame_60")
        self.searching_lineEdit = QtWidgets.QLineEdit(self.frame_60)
        self.searching_lineEdit.setGeometry(QtCore.QRect(10, 10, 181, 31))
        self.searching_lineEdit.setPlaceholderText('Search')
        font = QtGui.QFont()
        font.setPointSize(10)
        self.searching_lineEdit.setFont(font)
        self.searching_lineEdit.setObjectName("searching_lineEdit")
        self.searching_lineEdit.textChanged.connect(self.lineedittextchange)
        self.searching_lineEdit.returnPressed.connect(self.Enter)
        self.horizontalLayout_6.addWidget(self.frame_60)
        self.frame_91 = QtWidgets.QFrame(self.frame_48)
        self.frame_91.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_91.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_91.setObjectName("frame_91")
        self.horizontalLayout_6.addWidget(self.frame_91)
        self.horizontalLayout_14.addWidget(self.frame_48)
        self.verticalLayout_8.addWidget(self.frame_47)
        self.frame_46 = QtWidgets.QFrame(self.frame_44)
        self.frame_46.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_46.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_46.setObjectName("frame_46")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.frame_46)
        self.horizontalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_15.setSpacing(0)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.frame_61 = QtWidgets.QFrame(self.frame_46)
        self.frame_61.setMinimumSize(QtCore.QSize(0, 50))
        self.frame_61.setMaximumSize(QtCore.QSize(16777215, 60))
        self.frame_61.setStyleSheet("background-color: rgb(113, 113, 113);")
        self.frame_61.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_61.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_61.setObjectName("frame_61")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.frame_61)
        self.horizontalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_12.setSpacing(0)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.frame_72 = QtWidgets.QFrame(self.frame_61)
        self.frame_72.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_72.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_72.setObjectName("frame_72")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.frame_72)
        self.horizontalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_13.setSpacing(0)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.frame_73 = QtWidgets.QFrame(self.frame_72)
        self.frame_73.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_73.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_73.setObjectName("frame_73")
        self.horizontalLayout_13.addWidget(self.frame_73)
        self.frame_74 = QtWidgets.QFrame(self.frame_72)
        self.frame_74.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_74.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_74.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_74.setObjectName("frame_74")
        self.searching_filters = QtWidgets.QComboBox(self.frame_74)
        self.searching_filters.setGeometry(QtCore.QRect(10, 10, 241, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.searching_filters.setFont(font)
        self.searching_filters.setObjectName("searching_filters")
        self.searching_filters.addItem("")
        self.searching_filters.addItem("")
        self.searching_filters.addItem("")
        self.searching_filters.addItem("")
        self.searching_filters.currentTextChanged.connect(self.NotOppretor)
        self.horizontalLayout_13.addWidget(self.frame_74)
        self.frame_75 = QtWidgets.QFrame(self.frame_72)
        self.frame_75.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_75.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_75.setObjectName("frame_75")
        self.horizontalLayout_13.addWidget(self.frame_75)
        self.frame_76 = QtWidgets.QFrame(self.frame_72)
        self.frame_76.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_76.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_76.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_76.setObjectName("frame_76")
        self.searching_entity2 = QtWidgets.QComboBox(self.frame_76)
        self.searching_entity2.setEnabled(False)
        self.searching_entity2.setGeometry(QtCore.QRect(0, 10, 241, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.searching_entity2.setFont(font)
        self.searching_entity2.setObjectName("searching_entity2")
        self.searching_entity2.addItem("")
        self.searching_entity2.addItem("")
        self.searching_entity2.addItem("")
        self.searching_entity2.addItem("")
        self.searching_entity2.addItem("")
        self.searching_entity2.addItem("")
        self.searching_entity2.addItem("")
        self.searching_entity2.addItem("")
        self.searching_entity2.addItem("")
        self.horizontalLayout_13.addWidget(self.frame_76)
        self.frame_77 = QtWidgets.QFrame(self.frame_72)
        self.frame_77.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_77.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_77.setObjectName("frame_77")
        self.horizontalLayout_13.addWidget(self.frame_77)
        self.frame_80 = QtWidgets.QFrame(self.frame_72)
        self.frame_80.setMinimumSize(QtCore.QSize(400, 0))
        self.frame_80.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_80.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_80.setObjectName("frame_80")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.frame_80)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setSpacing(0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.frame_56 = QtWidgets.QFrame(self.frame_80)
        self.frame_56.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_56.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_56.setObjectName("frame_56")
        self.horizontalLayout_10.addWidget(self.frame_56)
        self.frame_57 = QtWidgets.QFrame(self.frame_80)
        self.frame_57.setMinimumSize(QtCore.QSize(90, 0))
        self.frame_57.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_57.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_57.setObjectName("frame_57")
        self.Searching_start_btn = QtWidgets.QPushButton(self.frame_57)
        self.Searching_start_btn.setGeometry(QtCore.QRect(0, 10, 91, 31))
        self.Searching_start_btn.clicked.connect(self.Buttonevent)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Searching_start_btn.setFont(font)
        self.Searching_start_btn.setStyleSheet("background-color: rgb(0, 170, 0);\n"
"border-radius:10\n"
"")
        self.Searching_start_btn.setObjectName("Searching_start_btn")
        self.Searching_start_btn.clicked.connect(self.lineedittextchange)
        self.horizontalLayout_10.addWidget(self.frame_57)
        self.frame_62 = QtWidgets.QFrame(self.frame_80)
        self.frame_62.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_62.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_62.setObjectName("frame_62")
        self.horizontalLayout_10.addWidget(self.frame_62)
        self.frame_63 = QtWidgets.QFrame(self.frame_80)
        self.frame_63.setMinimumSize(QtCore.QSize(70, 0))
        self.frame_63.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_63.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_63.setObjectName("frame_63")
        self.label_4 = QtWidgets.QLabel(self.frame_63)
        self.label_4.setGeometry(QtCore.QRect(0, 10, 70, 31))
        self.label_4.setMinimumSize(QtCore.QSize(70, 0))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_10.addWidget(self.frame_63)
        self.frame_64 = QtWidgets.QFrame(self.frame_80)
        self.frame_64.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_64.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_64.setObjectName("frame_64")
        self.horizontalLayout_10.addWidget(self.frame_64)
        self.horizontalLayout_13.addWidget(self.frame_80)
        self.frame_82 = QtWidgets.QFrame(self.frame_72)
        self.frame_82.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_82.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_82.setObjectName("frame_82")
        self.horizontalLayout_13.addWidget(self.frame_82)
        self.horizontalLayout_12.addWidget(self.frame_72)
        self.horizontalLayout_15.addWidget(self.frame_61)
        self.verticalLayout_8.addWidget(self.frame_46)
        self.verticalLayout_6.addWidget(self.frame_44)
        self.frame_45 = QtWidgets.QFrame(self.frame_81)
        self.frame_45.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_45.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_45.setObjectName("frame_45")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.frame_45)
        self.horizontalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_18.setSpacing(0)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.frame_86 = QtWidgets.QFrame(self.frame_45)
        self.frame_86.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_86.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_86.setObjectName("frame_86")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout(self.frame_86)
        self.horizontalLayout_19.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_19.setSpacing(0)
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.Searching_tableWidget = QtWidgets.QTableWidget(self.frame_86)
        self.Searching_tableWidget.setObjectName("Searching_tableWidget")
        self.Searching_tableWidget.setColumnCount(8)
        self.Searching_tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setBackground(QtGui.QColor(0, 0, 0))
        self.Searching_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Searching_tableWidget.setColumnWidth(0,250)
        self.Searching_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Searching_tableWidget.setColumnWidth(0,250)
        self.Searching_tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Searching_tableWidget.setColumnWidth(0,250)
        self.Searching_tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.Searching_tableWidget.setColumnWidth(0,250)
        self.Searching_tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.Searching_tableWidget.setColumnWidth(0,250)
        self.Searching_tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.Searching_tableWidget.setColumnWidth(0,250)
        self.Searching_tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.Searching_tableWidget.setColumnWidth(0,250)
        self.Searching_tableWidget.setHorizontalHeaderItem(7, item)
        self.horizontalLayout_19.addWidget(self.Searching_tableWidget)
        self.horizontalLayout_18.addWidget(self.frame_86)
        self.verticalLayout_6.addWidget(self.frame_45)
        self.verticalLayout_7.addWidget(self.frame_81)
        self.gridLayout_5.addWidget(self.frame_42, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_2)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setSpacing(0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.frame_19 = QtWidgets.QFrame(self.tab_2)
        self.frame_19.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_19.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_19.setObjectName("frame_19")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_19)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.frame_43 = QtWidgets.QFrame(self.frame_19)
        self.frame_43.setMinimumSize(QtCore.QSize(0, 50))
        self.frame_43.setStyleSheet("background-color: rgb(170, 170, 170);")
        self.frame_43.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_43.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_43.setObjectName("frame_43")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.frame_43)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setSpacing(0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.frame_22 = QtWidgets.QFrame(self.frame_43)
        self.frame_22.setMinimumSize(QtCore.QSize(0, 120))
        self.frame_22.setMaximumSize(QtCore.QSize(16777215, 120))
        self.frame_22.setStyleSheet("background-color: rgb(113, 113, 113);")
        self.frame_22.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_22.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_22.setObjectName("frame_22")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.frame_22)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setSpacing(0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.frame_31 = QtWidgets.QFrame(self.frame_22)
        self.frame_31.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_31.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_31.setObjectName("frame_31")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_31)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.frame_33 = QtWidgets.QFrame(self.frame_31)
        self.frame_33.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_33.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_33.setObjectName("frame_33")
        self.horizontalLayout_5.addWidget(self.frame_33)
        self.frame_38 = QtWidgets.QFrame(self.frame_31)
        self.frame_38.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_38.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_38.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_38.setObjectName("frame_38")
        self.Sorting_category = QtWidgets.QComboBox(self.frame_38)
        self.Sorting_category.setGeometry(QtCore.QRect(10, 10, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.Sorting_category.setFont(font)
        self.Sorting_category.setObjectName("Sorting_category")
        self.Sorting_category.currentTextChanged.connect(self.category_change)
        self.Sorting_category.addItem("")
        self.Sorting_category.addItem("")
        self.Sorting_category.addItem("")
        self.horizontalLayout_5.addWidget(self.frame_38)
        self.frame_34 = QtWidgets.QFrame(self.frame_31)
        self.frame_34.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_34.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_34.setObjectName("frame_34")
        self.horizontalLayout_5.addWidget(self.frame_34)
        self.frame_35 = QtWidgets.QFrame(self.frame_31)
        self.frame_35.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_35.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_35.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_35.setObjectName("frame_35")
        self.Sorting_algorithm = QtWidgets.QComboBox(self.frame_35)
        self.Sorting_algorithm.setGeometry(QtCore.QRect(10, 10, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.Sorting_algorithm.setFont(font)
        self.Sorting_algorithm.setStyleSheet("")
        self.Sorting_algorithm.setObjectName("Sorting_algorithm")
        # self.Sorting_algorithm.activated.connect(self.combobox)



        self.Sorting_algorithm.clear()
        self.Sorting_algorithm.addItem("Select Algorithm")
        self.Sorting_algorithm.addItem("Insertion Sort")
        self.Sorting_algorithm.addItem("Bubble Sort")
        self.Sorting_algorithm.addItem("Selection Sort")
        self.Sorting_algorithm.addItem("Merge Sort")
        self.Sorting_algorithm.addItem("Hybrid Merge Sort")
        self.Sorting_algorithm.addItem("Quick Sort")
        self.Sorting_algorithm.addItem("Heap Sort")
        self.Sorting_algorithm.addItem("Shell Sort")
        self.Sorting_algorithm.addItem("Comb Sort")
        self.Sorting_algorithm.addItem("Brick Sort")
        self.Sorting_algorithm.addItem("Counting Sort")
        self.Sorting_algorithm.addItem("Radix Sort")
        self.Sorting_algorithm.addItem("Bucket Sort")



        self.horizontalLayout_5.addWidget(self.frame_35)
        self.frame_36 = QtWidgets.QFrame(self.frame_31)
        self.frame_36.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_36.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_36.setObjectName("frame_36")
        self.horizontalLayout_5.addWidget(self.frame_36)
        self.frame_37 = QtWidgets.QFrame(self.frame_31)
        self.frame_37.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_37.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_37.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_37.setObjectName("frame_37")
        self.sorting_order = QtWidgets.QComboBox(self.frame_37)
        self.sorting_order.setGeometry(QtCore.QRect(10, 10, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.sorting_order.setFont(font)
        self.sorting_order.setObjectName("sorting_order")
        self.sorting_order.addItem("")
        self.sorting_order.addItem("")
        self.sorting_order.addItem("")
        self.horizontalLayout_5.addWidget(self.frame_37)
        self.frame_39 = QtWidgets.QFrame(self.frame_31)
        self.frame_39.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_39.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_39.setObjectName("frame_39")
        self.horizontalLayout_5.addWidget(self.frame_39)
        self.verticalLayout_11.addWidget(self.frame_31)
        self.frame_32 = QtWidgets.QFrame(self.frame_22)
        self.frame_32.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_32.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_32.setObjectName("frame_32")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_32)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setSpacing(0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.frame_83 = QtWidgets.QFrame(self.frame_32)
        self.frame_83.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_83.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_83.setObjectName("frame_83")
        self.horizontalLayout_7.addWidget(self.frame_83)
        self.frame_40 = QtWidgets.QFrame(self.frame_32)
        self.frame_40.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_40.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_40.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_40.setObjectName("frame_40")
        self.sorting_entity = QtWidgets.QComboBox(self.frame_40)
        self.sorting_entity.setGeometry(QtCore.QRect(10, 10, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.sorting_entity.setFont(font)
        self.sorting_entity.setObjectName("sorting_entity")
        self.sorting_entity.addItem("")
        self.horizontalLayout_7.addWidget(self.frame_40)
        self.frame_41 = QtWidgets.QFrame(self.frame_32)
        self.frame_41.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_41.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_41.setObjectName("frame_41")
        self.horizontalLayout_7.addWidget(self.frame_41)
        self.frame_65 = QtWidgets.QFrame(self.frame_32)
        self.frame_65.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_65.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_65.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_65.setObjectName("frame_65")
        self.Sorting_start_btn = QtWidgets.QPushButton(self.frame_65)
        self.Sorting_start_btn.setGeometry(QtCore.QRect(80, 10, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Sorting_start_btn.setFont(font)
        self.Sorting_start_btn.setStyleSheet("background-color: rgb(0, 170, 0);\n"
"border-radius:10\n"
"")
        self.Sorting_start_btn.setObjectName("Sorting_start_btn")
        self.Sorting_start_btn.clicked.connect(self.start)
        self.horizontalLayout_7.addWidget(self.frame_65)
        self.frame_69 = QtWidgets.QFrame(self.frame_32)
        self.frame_69.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_69.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_69.setObjectName("frame_69")
        self.horizontalLayout_7.addWidget(self.frame_69)
        self.frame_68 = QtWidgets.QFrame(self.frame_32)
        self.frame_68.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_68.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_68.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_68.setObjectName("frame_68")
        self.label_10 = QtWidgets.QLabel(self.frame_68)
        self.label_10.setGeometry(QtCore.QRect(10, 10, 231, 31))
        self.label_10.setMinimumSize(QtCore.QSize(70, 0))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_7.addWidget(self.frame_68)
        self.frame_67 = QtWidgets.QFrame(self.frame_32)
        self.frame_67.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_67.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_67.setObjectName("frame_67")
        self.horizontalLayout_7.addWidget(self.frame_67)
        self.verticalLayout_11.addWidget(self.frame_32)
        self.verticalLayout_10.addWidget(self.frame_22)
        self.frame_66 = QtWidgets.QFrame(self.frame_43)
        self.frame_66.setMinimumSize(QtCore.QSize(90, 0))
        self.frame_66.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_66.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_66.setObjectName("frame_66")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_66)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.Sorting_Table = QtWidgets.QTableWidget(self.frame_66)
        self.Sorting_Table.setObjectName("Sorting_Table")
        self.Sorting_Table.setColumnCount(7)
        self.Sorting_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.Sorting_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Sorting_Table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Sorting_Table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Sorting_Table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.Sorting_Table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.Sorting_Table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.Sorting_Table.setHorizontalHeaderItem(6, item)
        self.gridLayout.addWidget(self.Sorting_Table, 0, 0, 1, 1)
        self.verticalLayout_10.addWidget(self.frame_66)
        self.verticalLayout_4.addWidget(self.frame_43)
        self.gridLayout_4.addWidget(self.frame_19, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab_2, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setSpacing(0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.frame_15 = QtWidgets.QFrame(self.tab)
        self.frame_15.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_15.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_15.setObjectName("frame_15")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_15)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame_16 = QtWidgets.QFrame(self.frame_15)
        self.frame_16.setMinimumSize(QtCore.QSize(0, 120))
        self.frame_16.setMaximumSize(QtCore.QSize(16777215, 120))
        self.frame_16.setStyleSheet("background-color: rgb(113, 113, 113);")
        self.frame_16.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_16.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_16.setObjectName("frame_16")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.frame_16)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setSpacing(0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.frame_29 = QtWidgets.QFrame(self.frame_16)
        self.frame_29.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_29.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_29.setObjectName("frame_29")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_29)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.frame_25 = QtWidgets.QFrame(self.frame_29)
        self.frame_25.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_25.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_25.setObjectName("frame_25")
        self.horizontalLayout_4.addWidget(self.frame_25)
        self.frame_18 = QtWidgets.QFrame(self.frame_29)
        self.frame_18.setMinimumSize(QtCore.QSize(90, 0))
        self.frame_18.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_18.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_18.setObjectName("frame_18")
        self.Scrapping_start_btn = QtWidgets.QPushButton(self.frame_18)
        self.Scrapping_start_btn.setGeometry(QtCore.QRect(0, 10, 91, 31))
        self.Scrapping_start_btn.clicked.connect(self.response)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Scrapping_start_btn.setFont(font)
        self.Scrapping_start_btn.setStyleSheet("background-color: rgb(0, 170, 0);\n"
"border-radius:10\n"
"")
        self.Scrapping_start_btn.setObjectName("Scrapping_start_btn")
        self.horizontalLayout_4.addWidget(self.frame_18)
        self.frame_27 = QtWidgets.QFrame(self.frame_29)
        self.frame_27.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_27.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_27.setObjectName("frame_27")
        self.horizontalLayout_4.addWidget(self.frame_27)
        self.frame_30 = QtWidgets.QFrame(self.frame_29)
        self.frame_30.setMinimumSize(QtCore.QSize(90, 0))
        self.frame_30.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_30.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_30.setObjectName("frame_30")
        self.Scrapping_pause_btn = QtWidgets.QPushButton(self.frame_30)
        self.Scrapping_pause_btn.setGeometry(QtCore.QRect(0, 10, 91, 31))
        self.Scrapping_pause_btn.clicked.connect(self.pauseScrapping)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Scrapping_pause_btn.setFont(font)
        self.Scrapping_pause_btn.setStyleSheet("background-color: rgb(170, 170, 170);\n"
"border-radius:10")
        self.Scrapping_pause_btn.setObjectName("Scrapping_pause_btn")
        self.Scrapping_pause_btn.setDisabled(True)
        self.horizontalLayout_4.addWidget(self.frame_30)
        self.frame_70 = QtWidgets.QFrame(self.frame_29)
        self.frame_70.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_70.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_70.setObjectName("frame_70")
        self.horizontalLayout_4.addWidget(self.frame_70)
        self.frame_71 = QtWidgets.QFrame(self.frame_29)
        self.frame_71.setMinimumSize(QtCore.QSize(90, 0))
        self.frame_71.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_71.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_71.setObjectName("frame_71")
        self.Scrapping_resume_btn = QtWidgets.QPushButton(self.frame_71)
        self.Scrapping_resume_btn.setGeometry(QtCore.QRect(0, 10, 91, 31))
        self.Scrapping_resume_btn.clicked.connect(self.resumeScrapping)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Scrapping_resume_btn.setFont(font)
        self.Scrapping_resume_btn.setStyleSheet("background-color: rgb(170, 170, 170);\n"
"border-radius:10")
        self.Scrapping_resume_btn.setObjectName("Scrapping_resume_btn")
        self.Scrapping_resume_btn.setDisabled(True)
        self.horizontalLayout_4.addWidget(self.frame_71)
        self.frame_78 = QtWidgets.QFrame(self.frame_29)
        self.frame_78.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_78.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_78.setObjectName("frame_78")
        self.horizontalLayout_4.addWidget(self.frame_78)
        self.frame_79 = QtWidgets.QFrame(self.frame_29)
        self.frame_79.setMinimumSize(QtCore.QSize(90, 0))
        self.frame_79.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_79.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_79.setObjectName("frame_79")
        self.Scrapping_stop_btn = QtWidgets.QPushButton(self.frame_79)
        self.Scrapping_stop_btn.setGeometry(QtCore.QRect(0, 10, 91, 31))
        self.Scrapping_stop_btn.clicked.connect(self.stopScrapping)
        self.Scrapping_stop_btn.setDisabled(True)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Scrapping_stop_btn.setFont(font)
        self.Scrapping_stop_btn.setStyleSheet("\n"
"background-color: rgb(211, 0, 0);\n"
"border-radius:10\n"
"\n"
"")
        self.Scrapping_stop_btn.setObjectName("Scrapping_stop_btn")
        self.horizontalLayout_4.addWidget(self.frame_79)
        self.frame_84 = QtWidgets.QFrame(self.frame_29)
        self.frame_84.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_84.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_84.setObjectName("frame_84")
        self.horizontalLayout_4.addWidget(self.frame_84)
        self.verticalLayout_9.addWidget(self.frame_29)
        self.frame_21 = QtWidgets.QFrame(self.frame_16)
        self.frame_21.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_21.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_21.setObjectName("frame_21")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.frame_21)
        self.horizontalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_17.setSpacing(0)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.frame_24 = QtWidgets.QFrame(self.frame_21)
        self.frame_24.setMinimumSize(QtCore.QSize(90, 0))
        self.frame_24.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_24.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_24.setObjectName("frame_24")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout(self.frame_24)
        self.horizontalLayout_20.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_20.setSpacing(0)
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.frame_23 = QtWidgets.QFrame(self.frame_24)
        self.frame_23.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_23.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_23.setObjectName("frame_23")
        self.horizontalLayout_20.addWidget(self.frame_23)
        self.frame_26 = QtWidgets.QFrame(self.frame_24)
        self.frame_26.setMinimumSize(QtCore.QSize(250, 0))
        self.frame_26.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_26.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_26.setObjectName("frame_26")
        self.scrapping_category = QtWidgets.QComboBox(self.frame_26)
        self.scrapping_category.setGeometry(QtCore.QRect(20, 11, 221, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.scrapping_category.setFont(font)
        self.scrapping_category.setObjectName("scrapping_category")
        self.scrapping_category.addItem("")
        self.scrapping_category.addItem("")
        self.scrapping_category.addItem("")
        self.horizontalLayout_20.addWidget(self.frame_26)
        self.frame_28 = QtWidgets.QFrame(self.frame_24)
        self.frame_28.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_28.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_28.setObjectName("frame_28")
        self.horizontalLayout_20.addWidget(self.frame_28)
        self.frame_85 = QtWidgets.QFrame(self.frame_24)
        self.frame_85.setMinimumSize(QtCore.QSize(400, 0))
        self.frame_85.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_85.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_85.setObjectName("frame_85")
        self.progressBar = QtWidgets.QProgressBar(self.frame_85)
        self.progressBar.setGeometry(QtCore.QRect(20, 10, 371, 31))
        self.progressBar.setStyleSheet("")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.horizontalLayout_20.addWidget(self.frame_85)
        self.frame_87 = QtWidgets.QFrame(self.frame_24)
        self.frame_87.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_87.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_87.setObjectName("frame_87")
        self.horizontalLayout_20.addWidget(self.frame_87)
        self.frame_88 = QtWidgets.QFrame(self.frame_24)
        self.frame_88.setMinimumSize(QtCore.QSize(200, 0))
        self.frame_88.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_88.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_88.setObjectName("frame_88")
        self.scrapping_time = QtWidgets.QLabel(self.frame_88)
        self.scrapping_time.setGeometry(QtCore.QRect(10, 10, 181, 31))
        self.scrapping_time.setMinimumSize(QtCore.QSize(90, 0))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.scrapping_time.setFont(font)
        self.scrapping_time.setObjectName("scrapping_time")
        self.horizontalLayout_20.addWidget(self.frame_88)
        self.frame_89 = QtWidgets.QFrame(self.frame_24)
        self.frame_89.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_89.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_89.setObjectName("frame_89")
        self.horizontalLayout_20.addWidget(self.frame_89)
        self.horizontalLayout_17.addWidget(self.frame_24)
        self.verticalLayout_9.addWidget(self.frame_21)
        self.verticalLayout_3.addWidget(self.frame_16)
        self.frame_17 = QtWidgets.QFrame(self.frame_15)
        self.frame_17.setMinimumSize(QtCore.QSize(0, 50))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.frame_17.setFont(font)
        self.frame_17.setStyleSheet("background-color: rgb(170, 170, 170);")
        self.frame_17.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_17.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_17.setObjectName("frame_17")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.frame_17)
        self.gridLayout_7.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_7.setSpacing(0)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.Scrapping_tableWidget = QtWidgets.QTableWidget(self.frame_17)
        self.Scrapping_tableWidget.setObjectName("Scrapping_tableWidget")
        self.Scrapping_tableWidget.setColumnCount(7)
        self.Scrapping_tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.Scrapping_tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Scrapping_tableWidget.setColumnWidth(0,250)
        self.Scrapping_tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Scrapping_tableWidget.setColumnWidth(1,250)
        self.Scrapping_tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Scrapping_tableWidget.setColumnWidth(2,250)
        self.Scrapping_tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.Scrapping_tableWidget.setColumnWidth(3,250)
        self.Scrapping_tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.Scrapping_tableWidget.setColumnWidth(4,250)
        self.Scrapping_tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.Scrapping_tableWidget.setColumnWidth(5,250)
        self.Scrapping_tableWidget.setHorizontalHeaderItem(6, item)
        self.Scrapping_tableWidget.setColumnWidth(6,250)
        self.gridLayout_7.addWidget(self.Scrapping_tableWidget, 0, 0, 1, 1)
        self.verticalLayout_3.addWidget(self.frame_17)
        self.gridLayout_3.addWidget(self.frame_15, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab, "")
        self.gridLayout_2.addWidget(self.tabWidget, 0, 0, 1, 1)
        self.horizontalLayout.addWidget(self.frame_2)
        self.verticalLayout_5.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "Articles"))
        self.label_3.setText(_translate("MainWindow", " and Books"))
        self.label_5.setText(_translate("MainWindow", "Mananaging "))
        self.label_6.setText(_translate("MainWindow", "Project"))
        self.tabWidget.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>Sorting</p></body></html>"))
        self.searching_categoty.setItemText(0, _translate("MainWindow", "Select Category"))
        self.searching_categoty.setItemText(1, _translate("MainWindow", "Books"))
        self.searching_categoty.setItemText(2, _translate("MainWindow", "Articles"))
        self.searching_algorithm.setItemText(0, _translate("MainWindow", "Select Algorithm"))
        self.searching_algorithm.setItemText(1, _translate("MainWindow", "Linear Search"))
        self.searching_algorithm.setItemText(2, _translate("MainWindow", "Binary Search"))
        self.searching_algorithm.setItemText(3, _translate("MainWindow", "Boolean Search"))
        self.searching_entity1.setItemText(0, _translate("MainWindow", "Select First Entitiy"))
        self.searching_entity1.setItemText(1, _translate("MainWindow", "Title"))
        self.searching_entity1.setItemText(2, _translate("MainWindow", "Author"))
        self.searching_entity1.setItemText(3, _translate("MainWindow", "Publication Date"))
        self.searching_entity1.setItemText(4, _translate("MainWindow", "Publisher"))
        self.searching_entity1.setItemText(5, _translate("MainWindow", "ISBN"))
        self.searching_entity1.setItemText(6, _translate("MainWindow", "Language"))
        self.searching_entity1.setItemText(7, _translate("MainWindow", "Waiting Peoples"))

        self.searching_lineEdit.setText(_translate("MainWindow", ""))
        self.searching_filters.setItemText(0, _translate("MainWindow", "Filter By"))
        self.searching_filters.setItemText(1, _translate("MainWindow", "Contains"))
        self.searching_filters.setItemText(2, _translate("MainWindow", "Starts With"))
        self.searching_filters.setItemText(3, _translate("MainWindow", "Ends With"))
        self.searching_entity2.setItemText(0, _translate("MainWindow", "Select Second Entitiy"))
        self.searching_entity2.setItemText(1, _translate("MainWindow", "Title"))
        self.searching_entity2.setItemText(2, _translate("MainWindow", "Author"))
        self.searching_entity2.setItemText(3, _translate("MainWindow", "Publication Date"))
        self.searching_entity2.setItemText(4, _translate("MainWindow", "Publisher"))
        self.searching_entity2.setItemText(5, _translate("MainWindow", "ISBN"))
        self.searching_entity2.setItemText(6, _translate("MainWindow", "Language"))
        self.searching_entity2.setItemText(7, _translate("MainWindow", "Waiting Peoples"))

        self.Searching_start_btn.setText(_translate("MainWindow", "Start"))
        self.label_4.setText(_translate("MainWindow", "0.0s"))
        item = self.Searching_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Title"))
        self.Searching_tableWidget.setColumnWidth(0,250)
        item = self.Searching_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Author"))
        self.Searching_tableWidget.setColumnWidth(1,250)
        item = self.Searching_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Publisher"))
        self.Searching_tableWidget.setColumnWidth(2,250)
        item = self.Searching_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Date"))
        self.Searching_tableWidget.setColumnWidth(3,250)
        item = self.Searching_tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Collection"))
        self.Searching_tableWidget.setColumnWidth(4,250)
        item = self.Searching_tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Contributer"))
        self.Searching_tableWidget.setColumnWidth(5,250)
        item = self.Searching_tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "ISBN"))
        self.Searching_tableWidget.setColumnWidth(6,250)
        item = self.Searching_tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Waiting Peoples"))
        self.Searching_tableWidget.setColumnWidth(7,250)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Searching"))
        self.Sorting_category.setItemText(0, _translate("MainWindow", "Select Category"))
        self.Sorting_category.setItemText(1, _translate("MainWindow", "Books"))
        self.Sorting_category.setItemText(2, _translate("MainWindow", "Articles"))
        self.Sorting_algorithm.setItemText(0, _translate("MainWindow", "Select Algorithm"))
        self.Sorting_algorithm.setItemText(1, _translate("MainWindow", "Insertion Sort"))
        self.Sorting_algorithm.setItemText(2, _translate("MainWindow", "Bubble Sort"))
        self.Sorting_algorithm.setItemText(3, _translate("MainWindow", "Selection Sort"))
        self.Sorting_algorithm.setItemText(4, _translate("MainWindow", "Merge Sort"))
        self.Sorting_algorithm.setItemText(5, _translate("MainWindow", "Hybrid Merge Sort"))
        self.Sorting_algorithm.setItemText(6, _translate("MainWindow", "Radix Sort"))
        self.Sorting_algorithm.setItemText(7, _translate("MainWindow", "Counting Sort"))
        self.Sorting_algorithm.setItemText(8, _translate("MainWindow", "Bucket Sort"))
        self.Sorting_algorithm.setItemText(9, _translate("MainWindow", "Quick Sort"))
        self.Sorting_algorithm.setItemText(10, _translate("MainWindow", "Heap Sort"))
        self.Sorting_algorithm.setItemText(11, _translate("MainWindow", "Brick Sort"))
        self.Sorting_algorithm.setItemText(12, _translate("MainWindow", "Shell Sort"))
        self.Sorting_algorithm.setItemText(13, _translate("MainWindow", "Comb Sort"))
        self.sorting_order.setItemText(0, _translate("MainWindow", "Select Order"))
        self.sorting_order.setItemText(1, _translate("MainWindow", "Increasing"))
        self.sorting_order.setItemText(2, _translate("MainWindow", "Decreasing"))
        self.sorting_entity.setItemText(0, _translate("MainWindow", "Select Entitiy"))
        self.sorting_entity.setItemText(1, _translate("MainWindow", "Title"))
        self.sorting_entity.setItemText(2, _translate("MainWindow", "Author"))
        self.sorting_entity.setItemText(3, _translate("MainWindow", "Publication Date"))
        self.sorting_entity.setItemText(4, _translate("MainWindow", "Publisher"))
        self.sorting_entity.setItemText(5, _translate("MainWindow", "Isbn"))
        self.sorting_entity.setItemText(6, _translate("MainWindow", "Language"))
        self.sorting_entity.setItemText(7, _translate("MainWindow", "Waiting Peoples"))
        self.Sorting_start_btn.setText(_translate("MainWindow", "Start"))
        self.label_10.setText(_translate("MainWindow", "0.0s"))
        item = self.Sorting_Table.horizontalHeaderItem(0)
        self.Sorting_Table.setColumnWidth(0,250)
        item.setText(_translate("MainWindow", "New Column"))
        item = self.Sorting_Table.horizontalHeaderItem(1)
        self.Sorting_Table.setColumnWidth(1,250)
        item.setText(_translate("MainWindow", "A"))
        item = self.Sorting_Table.horizontalHeaderItem(2)
        self.Sorting_Table.setColumnWidth(2,250)
        item.setText(_translate("MainWindow", "B"))
        item = self.Sorting_Table.horizontalHeaderItem(3)
        self.Sorting_Table.setColumnWidth(3,250)
        item.setText(_translate("MainWindow", "C"))
        item = self.Sorting_Table.horizontalHeaderItem(4)
        self.Sorting_Table.setColumnWidth(4,250)
        item.setText(_translate("MainWindow", "D"))
        item = self.Sorting_Table.horizontalHeaderItem(5)
        self.Sorting_Table.setColumnWidth(5,250)
        item.setText(_translate("MainWindow", "E"))
        item = self.Sorting_Table.horizontalHeaderItem(6)
        self.Sorting_Table.setColumnWidth(6,250)
        item.setText(_translate("MainWindow", "G"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Sorting"))
        self.Scrapping_start_btn.setText(_translate("MainWindow", "Start"))
        self.Scrapping_pause_btn.setText(_translate("MainWindow", "Pause"))
        self.Scrapping_resume_btn.setText(_translate("MainWindow", "Resume"))
        self.Scrapping_stop_btn.setText(_translate("MainWindow", "Stop"))
        self.scrapping_category.setItemText(0, _translate("MainWindow", "Select Category"))
        self.scrapping_category.setItemText(1, _translate("MainWindow", "Books"))
        self.scrapping_category.setItemText(2, _translate("MainWindow", "Articles"))
        self.scrapping_time.setText(_translate("MainWindow", "0.0s"))
        item = self.Scrapping_tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "New Column"))
        item = self.Scrapping_tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Title"))
        item = self.Scrapping_tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Author"))
        item = self.Scrapping_tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "ABC"))
        item = self.Scrapping_tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "DEF"))
        item = self.Scrapping_tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "GHI"))
        item = self.Scrapping_tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "HIQ"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Scrapping"))


    def category_change(self,text):
        Temp=threading.Thread(target=self.category_textchg(text))
        Temp.start()

    def category_textchg(self,text):
        if (text=="Articles"):
                self.sorting_entity.clear()
                self.sorting_entity.addItem("Select Entity")
                self.sorting_entity.addItem("Title")
                self.sorting_entity.addItem("Authors")
                self.sorting_entity.addItem("Journal Citations")
                self.sorting_entity.addItem("PMIDs")
                self.sorting_entity.addItem("links")
                row =0
                self.Sorting_Table.setColumnCount(5)
                self.Sorting_Table.setRowCount(len(Data.ARTICLES))
                self.Sorting_Table.setHorizontalHeaderLabels(["Title","Authors","Journal Citations","PMIDs","links"])
                for article in Data.ARTICLES:
                        self.Sorting_Table.setItem(row,0,QTableWidgetItem(str(article['Title'])))
                        self.Sorting_Table.setItem(row,1,QTableWidgetItem(str(article['Authors'])))
                        self.Sorting_Table.setItem(row,2,QTableWidgetItem(str(article['Journal Citations'])))
                        self.Sorting_Table.setItem(row,3,QTableWidgetItem(str(article['PMIDs'])))
                        self.Sorting_Table.setItem(row,4,QTableWidgetItem(str(article['links'])))
                        row=row+1
        
        elif(text=="Books"):
                self.sorting_entity.clear()
                self.sorting_entity.addItem("Select Entity")
                self.sorting_entity.addItem("Title")
                self.sorting_entity.addItem("Authors")
                self.sorting_entity.addItem("Date")
                self.sorting_entity.addItem("Publisher")
                self.sorting_entity.addItem("ISBN")
                self.sorting_entity.addItem("Language")
                self.sorting_entity.addItem("Waiting Peoples")
                row =0
                self.Sorting_Table.setColumnCount(7)
                self.Sorting_Table.setRowCount(len(Data.BOOKS))
                self.Sorting_Table.setHorizontalHeaderLabels(["Title","Authors","Date","Publisher","ISBN",'Language','Waiting Peoples'])
                for books in Data.BOOKS:
                        self.Sorting_Table.setItem(row,0,QTableWidgetItem(str(books['Title'])))
                        self.Sorting_Table.setItem(row,1,QTableWidgetItem(str(books['Authors'])))
                        self.Sorting_Table.setItem(row,2,QTableWidgetItem(str(books['Date'])))
                        self.Sorting_Table.setItem(row,3,QTableWidgetItem(str(books['Publisher'])))
                        self.Sorting_Table.setItem(row,4,QTableWidgetItem(str(books['isbn'])))
                        self.Sorting_Table.setItem(row,5,QTableWidgetItem(str(books['Language'])))
                        self.Sorting_Table.setItem(row,6,QTableWidgetItem(str(books['Waiting Peoples'])))
                        row=row+1


#     def show_dialog(self):

#                 dialog = self.QMessageBox(MainWindow)

#                 dialog.setText('This is a hello world')
#                 dialog.setWindowTitle('HilI am super shy!') 
#                 dialog.setIcon(self.QMessageBox.Warning)
#                 dialog.exec_()



    def start(self,count):
        global Previous   
        Entity_Text = str(self.sorting_entity.currentText())
        Algorithm_Text = str(self.Sorting_algorithm.currentText())
        Category_Text = str(self.Sorting_category.currentText())
        Order_Text = str(self.sorting_order.currentText())
        Array=[]



        if(Category_Text=='Books'):
                Array=Data.BOOKS
        elif (Category_Text=='Articles'):
                Array=Data.ARTICLES
        
        if (Algorithm_Text != "Select Algorithm" and Entity_Text!="Select Entity" and Order_Text!='Select Order'):
                start_time=time.time()
                if Algorithm_Text=='Insertion Sort':
                        Array=funcs.InsertionSort(Array,0,len(Array),Entity_Text)
                elif Algorithm_Text=='Bubble Sort':
                        Array=funcs.BubbleSort(Array,0,len(Array),Entity_Text)
                elif Algorithm_Text=='Selection Sort':
                        Array=funcs.SelectionSort(Array,0,len(Array),Entity_Text)
                elif Algorithm_Text=='Merge Sort':
                        Array=funcs.MergeSort(Array,0,len(Array),Entity_Text)
                elif Algorithm_Text=='Hybrid Merge Sort':
                        Array=funcs.HybridMergeSort(Array,0,len(Array),Entity_Text)
                elif Algorithm_Text=='Quick Sort':
                        Array=funcs.QuickSort(Array,Entity_Text)
                elif Algorithm_Text=='Heap Sort':
                        Array=funcs.HeapSort(Array,Entity_Text)
                elif Algorithm_Text=='Shell Sort':
                        Array=funcs.ShellSort(Array,Entity_Text)             
                elif Algorithm_Text=='Comb Sort':
                        Array=funcs.CombSort(Array,Entity_Text)
                elif Algorithm_Text=='Brick Sort':
                        Array=funcs.BrickSort(Array,Entity_Text)
                elif Algorithm_Text=='MultiLevel Sort':
                        Array=funcs.MultilevalSort(Array,Entity_Text,Previous)
                elif Algorithm_Text == 'Counting Sort':
                        if Entity_Text == 'Waiting Peoples' or Entity_Text == 'PMIDs':                              
                                Array=funcs.CountingSort(Array,Entity_Text)
                        else:
                                self.show_dialog

                # elif Algorithm_Text == 'Radix Sort':
                #         Array=funcs.RadixSort(Array,Entity_Text)
                end_time=time.time()
                runtime=(end_time-start_time)
                self.label_10.setText(str(int(runtime/3600)) + ':' +str(int(runtime/60)) + ':' + str(int(runtime%60)))
                Previous=Entity_Text
                if self.Sorting_algorithm.count()==14:
                        self.Sorting_algorithm.addItem('MultiLevel Sort')       
                


                if(Category_Text=='Books' and Algorithm_Text != "Select Algorithm" and Entity_Text!="Select Entity" and Order_Text!='Select Order'):
                        row =0
                        self.Sorting_Table.setColumnCount(7)
                        self.Sorting_Table.setRowCount(len(Array))
                        self.Sorting_Table.setHorizontalHeaderLabels(["Title","Authors","Date","Publisher","ISBN",'Language','Waiting Peoples'])
                        if Order_Text=='Increasing':                      
                                for books in Array:
                                        self.Sorting_Table.setItem(row,0,QTableWidgetItem(str(books['Title'])))
                                        self.Sorting_Table.setItem(row,1,QTableWidgetItem(str(books['Authors'])))
                                        self.Sorting_Table.setItem(row,2,QTableWidgetItem(str(books['Date'])))
                                        self.Sorting_Table.setItem(row,3,QTableWidgetItem(str(books['Publisher'])))
                                        self.Sorting_Table.setItem(row,4,QTableWidgetItem(str(books['isbn'])))
                                        self.Sorting_Table.setItem(row,5,QTableWidgetItem(str(books['Language'])))
                                        self.Sorting_Table.setItem(row,6,QTableWidgetItem(str(books['Waiting Peoples'])))
                                        row=row+1
                        elif Order_Text=='Decreasing':
                                for i in range(len(Array)-1,-1,-1):
                                        self.Sorting_Table.setItem(row,0,QTableWidgetItem(str(Array[i]['Title'])))
                                        self.Sorting_Table.setItem(row,1,QTableWidgetItem(str(Array[i]['Authors'])))
                                        self.Sorting_Table.setItem(row,2,QTableWidgetItem(str(Array[i]['Date'])))
                                        self.Sorting_Table.setItem(row,3,QTableWidgetItem(str(Array[i]['Publisher'])))
                                        self.Sorting_Table.setItem(row,4,QTableWidgetItem(str(Array[i]['isbn'])))
                                        self.Sorting_Table.setItem(row,5,QTableWidgetItem(str(Array[i]['Language'])))
                                        self.Sorting_Table.setItem(row,6,QTableWidgetItem(str(Array[i]['Waiting Peoples'])))
                                        row=row+1

                elif((Category_Text=='Articles' and Algorithm_Text != "Select Algorithm" and Entity_Text!="Select Entity" and Order_Text!='Select Order')):
                        row =0
                        self.Sorting_Table.setColumnCount(5)
                        self.Sorting_Table.setRowCount(len(Array))
                        self.Sorting_Table.setHorizontalHeaderLabels(["Title","Authors","Journal Citations","PMIDs","links"])
                        if Order_Text=='Increasing':   
                                for article in Array:
                                        self.Sorting_Table.setItem(row,0,QTableWidgetItem(str(article['Title'])))
                                        self.Sorting_Table.setItem(row,1,QTableWidgetItem(str(article['Authors'])))
                                        self.Sorting_Table.setItem(row,2,QTableWidgetItem(str(article['Journal Citations'])))
                                        self.Sorting_Table.setItem(row,3,QTableWidgetItem(str(article['PMIDs'])))
                                        self.Sorting_Table.setItem(row,4,QTableWidgetItem(str(article['links'])))
                                        row=row+1
                        elif Order_Text=='Decreasing': 
                                for i in range(len(Array)-1,-1,-1):
                                        self.Sorting_Table.setItem(row,0,QTableWidgetItem(str(Array[i]['Title'])))
                                        self.Sorting_Table.setItem(row,1,QTableWidgetItem(str(Array[i]['Authors'])))
                                        self.Sorting_Table.setItem(row,2,QTableWidgetItem(str(Array[i]['Journal Citations'])))
                                        self.Sorting_Table.setItem(row,3,QTableWidgetItem(str(Array[i]['PMIDs'])))
                                        self.Sorting_Table.setItem(row,4,QTableWidgetItem(str(Array[i]['links'])))
                                        row=row+1    
    def combobox(self):
        self.Sorting_algorithm.clear()
        self.Sorting_algorithm.addItem("Select Algorithm")
        self.Sorting_algorithm.addItem("Insertion Sort")
        self.Sorting_algorithm.addItem("Bubble Sort")
        self.Sorting_algorithm.addItem("Selection Sort")
        self.Sorting_algorithm.addItem("Merge Sort")
        self.Sorting_algorithm.addItem("Hybrid Merge Sort")
        self.Sorting_algorithm.addItem("Quick Sort")
        self.Sorting_algorithm.addItem("Heap Sort")
        self.Sorting_algorithm.addItem("Shell Sort")
        self.Sorting_algorithm.addItem("Comb Sort")
        self.Sorting_algorithm.addItem("Brick Sort")
        self.Sorting_algorithm.addItem("Counting Sort")
        self.Sorting_algorithm.addItem("Radix Sort")
        self.Sorting_algorithm.addItem("Bucket Sort")
    

    def onsearching_category_change(self,text):
        Temp=threading.Thread(target=self.onsearching_category_chg(text))
        Temp.start()

    def onsearching_category_chg(self,text):
        if (text=="Articles"):
                self.searching_entity1.clear()
                self.searching_entity1.addItem("Select Entity")
                self.searching_entity1.addItem("Title")
                self.searching_entity1.addItem("Authors")
                self.searching_entity1.addItem("Journal Citations")
                self.searching_entity1.addItem("PMIDs")
                self.searching_entity1.addItem("links")
                self.searching_entity2.clear()
                self.searching_entity2.addItem("Select Entity")
                self.searching_entity2.addItem("Title")
                self.searching_entity2.addItem("Authors")
                self.searching_entity2.addItem("Journal Citations")
                self.searching_entity2.addItem("PMIDs")
                self.searching_entity2.addItem("links")
                row =0
                self.Searching_tableWidget.setColumnCount(5)
                self.Searching_tableWidget.setRowCount(len(Data.ARTICLES))
                self.Searching_tableWidget.setHorizontalHeaderLabels(["Title","Authors","Journal Citations","PMIDs","links"])
                for article in Data.ARTICLES:
                        self.Searching_tableWidget.setItem(row,0,QTableWidgetItem(str(article['Title'])))
                        self.Searching_tableWidget.setItem(row,1,QTableWidgetItem(str(article['Authors'])))
                        self.Searching_tableWidget.setItem(row,2,QTableWidgetItem(str(article['Journal Citations'])))
                        self.Searching_tableWidget.setItem(row,3,QTableWidgetItem(str(article['PMIDs'])))
                        self.Searching_tableWidget.setItem(row,4,QTableWidgetItem(str(article['links'])))
                        row=row+1
        
        elif(text=="Books"):
                self.searching_entity1.clear()
                self.searching_entity1.addItem("Select Entity")
                self.searching_entity1.addItem("Title")
                self.searching_entity1.addItem("Authors")
                self.searching_entity1.addItem("Date")
                self.searching_entity1.addItem("Publisher")
                self.searching_entity1.addItem("isbn")
                self.searching_entity1.addItem("Language")
                self.searching_entity1.addItem("Waiting Peoples")
                self.searching_entity2.clear()
                self.searching_entity2.addItem("Select Entity")
                self.searching_entity2.addItem("Title")
                self.searching_entity2.addItem("Authors")
                self.searching_entity2.addItem("Date")
                self.searching_entity2.addItem("Publisher")
                self.searching_entity2.addItem("isbn")
                self.searching_entity2.addItem("Language")
                self.searching_entity2.addItem("Waiting Peoples")
                row =0
                self.Searching_tableWidget.setColumnCount(7)
                self.Searching_tableWidget.setRowCount(len(Data.BOOKS))
                self.Searching_tableWidget.setHorizontalHeaderLabels(["Title","Authors","Date","Publisher","ISBN",'Language','Waiting Peoples'])
                for books in Data.BOOKS:
                        self.Searching_tableWidget.setItem(row,0,QTableWidgetItem(str(books['Title'])))
                        self.Searching_tableWidget.setItem(row,1,QTableWidgetItem(str(books['Authors'])))
                        self.Searching_tableWidget.setItem(row,2,QTableWidgetItem(str(books['Date'])))
                        self.Searching_tableWidget.setItem(row,3,QTableWidgetItem(str(books['Publisher'])))
                        self.Searching_tableWidget.setItem(row,4,QTableWidgetItem(str(books['isbn'])))
                        self.Searching_tableWidget.setItem(row,5,QTableWidgetItem(str(books['Language'])))
                        self.Searching_tableWidget.setItem(row,6,QTableWidgetItem(str(books['Waiting Peoples'])))
                        row=row+1


    def enableentity1(self,text):
        if text == 'Boolean Search':
                self.searching_entity2.setDisabled(False)
                self.searching_filters.setDisabled(False)
                self.Searching_start_btn.setDisabled(False)
                self.searching_filters.clear()
                self.searching_filters.addItem('Select Filter')
                self.searching_filters.addItem('And')
                self.searching_filters.addItem('Or')
                self.searching_filters.addItem('Not')
        elif text == 'Linear Search':
                self.searching_entity2.setDisabled(True)
                self.searching_filters.setDisabled(False)
                self.Searching_start_btn.setDisabled(True)
                self.searching_filters.clear()
                self.searching_filters.addItem('Select Filter')
                self.searching_filters.addItem('Contains')
                self.searching_filters.addItem('Starts With')
                self.searching_filters.addItem('Ends With')
        elif text == 'Binary Search':
                self.searching_entity2.setDisabled(True)
                self.searching_filters.setDisabled(True)
                self.Searching_start_btn.setDisabled(False)


    def lineedittextchange(self):
        Temp=threading.Thread(target=self.lineedittextchg)
        Temp.start()
    def lineedittextchg(self):
        category_text=self.searching_categoty.currentText()
        algorithm_text=self.searching_algorithm.currentText()
        entity1_text=self.searching_entity1.currentText()
        filters_text=self.searching_filters.currentText()
        search_text=self.searching_lineEdit.text()
        Array=[]
        Temp=[]
        start_time = time.time()
        QApplication.processEvents()
        if (category_text!="Select Category" and algorithm_text!="Select Algorithm" and entity1_text!='Select First Entity' and filters_text!='Filter By'):
                if category_text=='Books':
                        Array=Data.BOOKS
                elif category_text=='Articles':
                        Array=Data.ARTICLES
                if filters_text=='Contains' and algorithm_text=="Linear Search":
                        Temp=funcs.LinearSearchthatcontain(Array,entity1_text,search_text)
                elif filters_text=='Starts With' and algorithm_text=="Linear Search":
                        Temp=funcs.LinearSearchthatStarts(Array,entity1_text,search_text)
                elif filters_text=='Ends With' and algorithm_text=="Linear Search":
                        Temp=funcs.LinearSearchthatEnds(Array,entity1_text,search_text)


                endtime = time.time()
                runtime = start_time-endtime
                self.label_4.setText(str(int(runtime/3600)) + ':' +str(int(runtime/60)) + ':' + str(int(runtime%60)))
                if category_text=='Articles' and algorithm_text=="Linear Search":
                        row =0
                        self.Sorting_Table.setColumnCount(5)
                        self.Sorting_Table.setRowCount(len(Temp))
                        self.Sorting_Table.setHorizontalHeaderLabels(["Title","Authors","Journal Citations","PMIDs","links"])
                        for article in Temp:
                                self.Searching_tableWidget.setItem(row,0,QTableWidgetItem(str(article['Title'])))
                                self.Searching_tableWidget.setItem(row,1,QTableWidgetItem(str(article['Authors'])))
                                self.Searching_tableWidget.setItem(row,2,QTableWidgetItem(str(article['Journal Citations'])))
                                self.Searching_tableWidget.setItem(row,3,QTableWidgetItem(str(article['PMIDs'])))
                                self.Searching_tableWidget.setItem(row,4,QTableWidgetItem(str(article['links'])))
                                row=row+1
                if category_text=='Books' and algorithm_text=="Linear Search":
                        row =0
                        self.Searching_tableWidget.setColumnCount(7)
                        self.Searching_tableWidget.setRowCount(len(Temp))
                        self.Searching_tableWidget.setHorizontalHeaderLabels(["Title","Authors","Date","Publisher","ISBN",'Language','Waiting Peoples'])
                        for books in Temp:
                                self.Searching_tableWidget.setItem(row,0,QTableWidgetItem(str(books['Title'])))
                                self.Searching_tableWidget.setItem(row,1,QTableWidgetItem(str(books['Authors'])))
                                self.Searching_tableWidget.setItem(row,2,QTableWidgetItem(str(books['Date'])))
                                self.Searching_tableWidget.setItem(row,3,QTableWidgetItem(str(books['Publisher'])))
                                self.Searching_tableWidget.setItem(row,4,QTableWidgetItem(str(books['isbn'])))
                                self.Searching_tableWidget.setItem(row,5,QTableWidgetItem(str(books['Language'])))
                                self.Searching_tableWidget.setItem(row,6,QTableWidgetItem(str(books['Waiting Peoples'])))
                                row=row+1

    def Buttonevent(self):
        Temp=threading.Thread(target=self.Btnevent)
        Temp.start()
    def Btnevent(self):
        category_text=self.searching_categoty.currentText()
        algorithm_text=self.searching_algorithm.currentText()
        entity1_text=self.searching_entity1.currentText()
        filters_text=self.searching_filters.currentText()
        search_text=self.searching_lineEdit.text()
        entity2_text=self.searching_entity2.currentText()
        Array=[]
        Temp=[]
        start_time = time.time()
        if (category_text!="Select Category" and algorithm_text!="Select Algorithm" and entity1_text!='Select First Entity'):
                if category_text=='Books':
                        Array=Data.BOOKS
                elif category_text=='Articles':
                        Array=Data.ARTICLES
                if filters_text!='Filter By':
                        if filters_text=='Not' and algorithm_text=="Boolean Search":
                                Temp=funcs.BooleanSearchwithNot(Array,entity1_text,search_text)
                        elif filters_text=='And' and algorithm_text=="Boolean Search":
                                Temp=funcs.BooleanSearchwithAnd(Array,entity1_text,entity2_text,search_text)
                        elif filters_text=='Or' and algorithm_text=="Boolean Search":
                                Temp=funcs.BooleanSearchwithOr(Array,entity1_text,entity2_text,search_text)
                if algorithm_text=="Binary Search":
                        Temp = funcs.BinarySearch(Array, search_text, 0, len(Array),entity1_text)



                endtime = time.time()
                runtime = start_time-endtime
                self.label_4.setText(str(int(runtime/3600)) + ':' +str(int(runtime/60)) + ':' + str(int(runtime%60)))
 
                if category_text=='Articles':
                        row =0
                        self.Searching_tableWidget.setColumnCount(5)
                        self.Searching_tableWidget.setRowCount(len(Temp))
                        self.Searching_tableWidget.setHorizontalHeaderLabels(["Title","Authors","Journal Citations","PMIDs","links"])
                        for article in Temp:
                                self.Searching_tableWidget.setItem(row,0,QTableWidgetItem(str(article['Title'])))
                                self.Searching_tableWidget.setItem(row,1,QTableWidgetItem(str(article['Authors'])))
                                self.Searching_tableWidget.setItem(row,2,QTableWidgetItem(str(article['Journal Citations'])))
                                self.Searching_tableWidget.setItem(row,3,QTableWidgetItem(str(article['PMIDs'])))
                                self.Searching_tableWidget.setItem(row,4,QTableWidgetItem(str(article['links'])))
                                row=row+1
                elif category_text=='Books':
                        row =0
                        self.Searching_tableWidget.setColumnCount(7)
                        self.Searching_tableWidget.setRowCount(len(Temp))
                        self.Searching_tableWidget.setHorizontalHeaderLabels(["Title","Authors","Date","Publisher","ISBN",'Language','Waiting Peoples'])
                        for books in Temp:
                                self.Searching_tableWidget.setItem(row,0,QTableWidgetItem(str(books['Title'])))
                                self.Searching_tableWidget.setItem(row,1,QTableWidgetItem(str(books['Authors'])))
                                self.Searching_tableWidget.setItem(row,2,QTableWidgetItem(str(books['Date'])))
                                self.Searching_tableWidget.setItem(row,3,QTableWidgetItem(str(books['Publisher'])))
                                self.Searching_tableWidget.setItem(row,4,QTableWidgetItem(str(books['isbn'])))
                                self.Searching_tableWidget.setItem(row,5,QTableWidgetItem(str(books['Language'])))
                                self.Searching_tableWidget.setItem(row,6,QTableWidgetItem(str(books['Waiting Peoples'])))
                                row=row+1



    def NotOppretor(self):
        filters_text=self.searching_filters.currentText()
        if filters_text == 'And' or filters_text == 'Or':
                self.searching_entity2.setDisabled(False)
        else:
                self.searching_entity2.setDisabled(True)



    def Enter(self):
        filters_text=self.searching_filters.currentText()
        search_text=self.searching_lineEdit.text()
        if filters_text == 'And':
                search_text = search_text + ' & '
                self.searching_lineEdit.setText(search_text)
        if filters_text == 'Or':
                search_text = search_text + ' | '
                self.searching_lineEdit.setText(search_text)


    def StartScrapping(self):
        self.Stop = 0
        self.Resume = 1
        self.SubResume = 1
        self.titles = []
        self.authors = []
        self.dates=[]
        self.publishers=[]
        self.isbns = []
        self.languages=[]
        self.waiting_peoples=[]
        self.article_titles=[]
        self.article_author=[]
        self.Journal_Citations=[]
        self.PMIDs=[]
        self.links = []
        self.runtime = 0
        self.Books=[]
        self.Articles=[]
        self.runtime = 0
        self.scrapping_category.setDisabled(True)

        self.category_text = self.scrapping_category.currentText()
        Temp=[]
        if self.category_text == 'Books':
                self.scrapping(self.category_text)
                Temp = self.Books
        elif self.category_text == 'Articles':
                self.scrapping(self.category_text)
                Temp = self.Articles
        # print(Temp)
        # if category_text=='Articles':
        #         row =0
        #         self.Scrapping_tableWidget.setColumnCount(5)
        #         self.Scrapping_tableWidget.setRowCount(len(Temp))
        #         self.Scrapping_tableWidget.setHorizontalHeaderLabels(["Title","Authors","Journal Citations","PMIDs","links"])
        #         for article in Temp:
        #                 self.Scrapping_tableWidget.setItem(row,0,QTableWidgetItem(str(article['Title'])))
        #                 self.Scrapping_tableWidget.setItem(row,1,QTableWidgetItem(str(article['Authors'])))
        #                 self.Scrapping_tableWidget.setItem(row,2,QTableWidgetItem(str(article['Journal Citations'])))
        #                 self.Scrapping_tableWidget.setItem(row,3,QTableWidgetItem(str(article['PMIDs'])))
        #                 self.Scrapping_tableWidget.setItem(row,4,QTableWidgetItem(str(article['links'])))
        #                 row=row+1
        # elif category_text=='Books':
        #         row =0
        #         self.Scrapping_tableWidget.setColumnCount(7)
        #         self.Scrapping_tableWidget.setRowCount(len(Temp))
        #         self.Scrapping_tableWidget.setHorizontalHeaderLabels(["Title","Authors","Date","Publisher","ISBN",'Language','Waiting Peoples'])
        #         for books in Temp:
        #                 self.Scrapping_tableWidget.setItem(row,0,QTableWidgetItem(str(books['Title'])))
        #                 self.Scrapping_tableWidget.setItem(row,1,QTableWidgetItem(str(books['Authors'])))
        #                 self.Scrapping_tableWidget.setItem(row,2,QTableWidgetItem(str(books['Date'])))
        #                 self.Scrapping_tableWidget.setItem(row,3,QTableWidgetItem(str(books['Publisher'])))
        #                 self.Scrapping_tableWidget.setItem(row,4,QTableWidgetItem(str(books['isbn'])))
        #                 self.Scrapping_tableWidget.setItem(row,5,QTableWidgetItem(str(books['Language'])))
        #                 self.Scrapping_tableWidget.setItem(row,6,QTableWidgetItem(str(books['Waiting Peoples'])))
        #                 row=row+1


    def response(self):
        Temp=threading.Thread(target=self.StartScrapping)
        Temp.start()

    def BookPrint(self):
        row =0
        self.Scrapping_tableWidget.setColumnCount(7)
        self.Scrapping_tableWidget.setRowCount(len(self.Books))
        self.Scrapping_tableWidget.setHorizontalHeaderLabels(["Title","Authors","Date","Publisher","ISBN",'Language','Waiting Peoples'])
        for books in self.Books:
                self.Scrapping_tableWidget.setItem(row,0,QTableWidgetItem(str(books['Title'])))
                self.Scrapping_tableWidget.setItem(row,1,QTableWidgetItem(str(books['Authors'])))
                self.Scrapping_tableWidget.setItem(row,2,QTableWidgetItem(str(books['Date'])))
                self.Scrapping_tableWidget.setItem(row,3,QTableWidgetItem(str(books['Publisher'])))
                self.Scrapping_tableWidget.setItem(row,4,QTableWidgetItem(str(books['isbn'])))
                self.Scrapping_tableWidget.setItem(row,5,QTableWidgetItem(str(books['Language'])))
                self.Scrapping_tableWidget.setItem(row,6,QTableWidgetItem(str(books['Waiting Peoples'])))
                row=row+1

    def Articleprint(self):
        row =0
        self.Scrapping_tableWidget.setColumnCount(5)
        self.Scrapping_tableWidget.setRowCount(len(self.Articles))
        self.Scrapping_tableWidget.setHorizontalHeaderLabels(["Title","Authors","Journal Citations","PMIDs","links"])
        for article in self.Articles:
                self.Scrapping_tableWidget.setItem(row,0,QTableWidgetItem(str(article['Title'])))
                self.Scrapping_tableWidget.setItem(row,1,QTableWidgetItem(str(article['Authors'])))
                self.Scrapping_tableWidget.setItem(row,2,QTableWidgetItem(str(article['Journal Citations'])))
                self.Scrapping_tableWidget.setItem(row,3,QTableWidgetItem(str(article['PMIDs'])))
                self.Scrapping_tableWidget.setItem(row,4,QTableWidgetItem(str(article['links'])))
                row=row+1

    
    def z_OkScrapping(self):
        start_time=time.time()
        start = self.Resume
    
        for s in range(start,3988):
            self.Resume = s
            if (s%10==0):
                    time.sleep(3)
            reg=requests.get("https://b-ok.asia/request.php?s=&order=date&page="+str(s))
            soup = BeautifulSoup(reg.text,"html.parser")
    
            for a in soup.findAll('div', attrs={'id': 'searchResultBox'}):
                publisher=[]
                title = a.find_all('div', attrs={'class': 'title'})
                author = a.find_all('div', attrs={'class': 'author'})
                temp = a.find_all('div', attrs={'class': 'publisher'})
                for i in temp:
                    publisher.append(i.find('a'))
                date = a.find_all('span',attrs={"class":"year"})
                isbn =  a.find_all('span',attrs={"class":"isbn"})
                language= a.find_all("span",attrs={'class':"language text-capitalize"})
                waiting_people=a.find_all("span",attrs={'class':"track_count"})
            isbn=list(dict.fromkeys(isbn))
    
            for i in range(0,len(title)):
                self.titles.append(title[i].text)
                self.authors.append(author[i].text)
                self.waiting_peoples.append(waiting_people[i].text)
    
                if self.Stop == 1:
                        break

                if(i<len(publisher) and publisher[i]!= None):
                    self.publishers.append(publisher[i].text)
                else:
                    self.publishers.append('empty')
    
                if(i<len(isbn)and isbn[i]!= None):
                    self.isbns.append(isbn[i].text)
                else:
                    self.isbns.append(random.randint(1111111111111,9999999999999))
                if (i<len(date)and date[i]!= None):
                    self.dates.append(date[i].text)
                
                else :
                    self.dates.append(random.randint(2000,2022))
                if (i<len(language) and language[i]!= None):
                    self.languages.append(language[i].text)
                else:
                    self.languages.append('English')
            
            if self.Stop == 1:
                        break
            self.Progress = (len(self.Books)/420000)*100
            self.progressBar.setValue(math.floor(self.Progress))
            end_time=time.time()
            self.runtime = self.runtime + (end_time - start_time )
            self.scrapping_time.setText(str(int(self.runtime/3600)) + ':' +str(int(self.runtime/60)) + ':' + str(int(self.runtime%60)))
            self.make2DBooks()
            self.BookPrint()
            df = pd.DataFrame(
            {'Title':self.titles,'Authors':self.authors,'Date':self.dates,'Publisher':self.publishers,'isbn':self.isbns,'Language':self.languages,'Waiting Peoples':self.waiting_peoples})
            df.to_csv('z-okBooks.csv', index=False, encoding='utf-8')
        return True
    
    
    def MergeScraping(self,array,start,end):
            start_time=time.time()
            if start != end:
                q = (start + end)//2
                titles1 = []
                authors1 = []
                dates1 = []
                publishers1=[]
                isbns1=[]
                languages1=[]
                waiting_peoples1=[]
                titles2 = []
                authors2 = []
                dates2 = []
                publishers2=[]
                isbns2=[]
                languages2=[]
                waiting_peoples2=[]
                (titles1,authors1,dates1,publishers1,isbns1,languages1,waiting_peoples1)=self.MergeScraping(array, start, q)
                (titles2,authors2,dates2,publishers2,isbns2,languages2,waiting_peoples2)=self.MergeScraping(array, q + 1, end)
                end_time=time.time()
                runtime = end_time - start_time 
                return (titles1+titles2,authors1+authors2,dates1+dates2,publishers1+publishers2,isbns1+isbns2,languages1+languages2,waiting_peoples1+waiting_peoples2)
    
            else :
                titles1="empty"
                authors1="empty"
                dates1="empty"
                publishers1="empty"
                isbns1="empty"
                languages1="empty"
                waiting_peoples1='empty'
                reg=requests.get(str(array[start][0]))
                soup = BeautifulSoup(reg.text,"html.parser")
    
                for a in soup.findAll('main', attrs={'id': 'maincontent'}):
                    title = a.find('span', attrs={'class': 'breaker-breaker'})
                    author = a.find('a', attrs={'rel': 'nofollow'})
                    date = a.find('span', attrs={'itemprop': 'datePublished'})
                    publisher = a.find('span', attrs={'itemprop': 'publisher'})
    
                    if title != None:
                        titles1=title.text
                    else :
                        titles1='empty'
                    if author != None:
                        authors1=author.text
                    else :
                        authors1='empty'
                    if date != None:
                        dates1=date.text
                    else :
                        dates1='empty'
                    if publisher != None:
                        publishers1=publisher.text
                    else :
                        publishers1='empty'
    
    
    
                for a in soup.find_all('dt'):
                    temp=''
                    if a.text == 'Language':
                        language=a.find_next('a', attrs={'rel': 'nofollow'})
                        languages1=language.text
                if (languages1 == "empty"):
                    languages1="empty"
                isbns1=random.randint(111111111111,999999999999)
                self.isbns.append(isbns1)
                waiting_peoples1=random.randint(1,3000)
                self.waiting_peoples.append(waiting_peoples1)
                self.titles.append(titles1)
                self.authors.append(authors1)
                self.dates.append(dates1)
                self.publishers.append(publishers1)
                self.languages.append(languages1)
                self.make2DBooks()
                self.BookPrint()
                df = pd.DataFrame(
                {'Title':self.titles,'Authors':self.authors,'Publication Date':self.dates,'Publisher':self.publishers,'isbn':self.isbns,'Languages':self.languages,'Waiting Peoples':self.waiting_peoples  })
                df.to_csv('ArchieveBooks.csv', index=False, encoding='utf-8')
                return (titles1,authors1,dates1,publishers1,isbns1,languages1,waiting_peoples1)       
            
    def ArchieveScrapping(self):
        df = pd.read_csv('archive.csv' )           
        list1 = df.values.tolist()
        (titles,authors,dates,publishers,isbns,languages,waiting_peoples)=self.MergeScraping(list1,0,len(list1))
    
    def ArticleScrapping(self):
        df = pd.read_csv('Articleslinks.csv' )           
        ArticlesLinks = df.values.tolist() 
    
        start_time=time.time()
        start1 = self.Resume
        start2 = self.SubResume

        for i in range(start1,len(ArticlesLinks)):
            self.Resume = i
            URl=ArticlesLinks[i][0]
            for s in range(start2,1000):
                self.SubResume = s
                if (s%10==0):
                    time.sleep(3)
                if s==1:
                    reg=requests.get(URl)
                else:
                    reg=requests.get(URl+'&page='+str(s))
                soup = BeautifulSoup(reg.text,"html.parser")
    
                for a in soup.findAll('div', attrs={'class': 'docsum-wrap'}):
    
                    title = a.find('a', attrs={'class': 'docsum-title'})
                    author = a.find('span', attrs={'class': 'docsum-authors full-authors'})
                    Journal_Citation = a.find('span', attrs={'class': 'docsum-journal-citation full-journal-citation'})
                    PMID = a.find('span', attrs={'class': 'docsum-pmid'})
    
                    temp=''
                    for i in range(0,len(title.text)):
                        if (title.text[i]!=' ' and title.text[i]!='\n'):
                            temp=temp+title.text[i]
                    self.article_titles.append(temp)
                    self.article_author.append(author.text)
                    self.Journal_Citations.append(Journal_Citation.text)
                    self.PMIDs.append(PMID.text)
                    self.links.append('https://pubmed.ncbi.nlm.nih.gov/'+title.get('href'))
    
                if self.Stop == 1:
                        break
                self.Progress = (len(self.Articles)/500000)*100
                self.progressBar.setValue(math.floor(self.Progress))
                end_time=time.time()
                self.runtime = self.runtime+(end_time - start_time)
                self.scrapping_time.setText(str(int(self.runtime/3600)) + ':' +str(int(self.runtime/60)) + ':' + str(int(self.runtime%60)))
                self.make2DArticles()
                self.Articleprint()
                df = pd.DataFrame(
                {'Title':self.article_titles,'Authors':self.article_author,'Journal Citations':self.Journal_Citations,'PMIDs':self.PMIDs,'links':self.links})
                df.to_csv('ABCDEF.csv', index=False, encoding='utf-8')
            if self.Stop == 1:
                        break
             
    def make2DBooks(self):
        for i in range(0,len(self.titles)):
            Temp={'Title':'empty','Authors':'empty','Date':'empty','Publisher':'empty','isbn':12,'Language':'empty','Waiting Peoples':0}
            Temp['Title']=self.titles[i]
            Temp['Authors']=str(self.authors[i])
            Temp['Date']=self.dates[i]
            Temp['Publisher']=self.publishers[i]
            Temp['ISBN']=self.isbns[i]
            Temp['Language']=self.languages[i]
            Temp['Waiting Peoples']=self.waiting_peoples[i]
            self.Books.append(Temp)       
            
    
    def make2DArticles(self):
        for i in range(0,len(self.article_titles)):
            Temp={'Title':'empty','Authors':'empty','Journal Citations':'empty','PMIDs':0,'links':'empty'}
            Temp['Title']=self.article_titles[i]
            Temp['Authors']=self.article_author[i]
            Temp['Journal Citations']=self.Journal_Citations[i]
            Temp['PMIDs']=self.PMIDs[i]
            Temp['links']=self.links[i]
            self.Articles.append(Temp)
    
    def scrapping(self,Text):
        self.Scrapping_pause_btn.setDisabled(False)
        self.Scrapping_stop_btn.setDisabled(False)
        self.Scrapping_start_btn.setDisabled(True)
        if Text == 'Books':
           if self.z_OkScrapping() == True:
                self.ArchieveScrapping()
        elif Text == 'Articles':
            self.ArticleScrapping()
    
    def stopScrapping(self):
        self.scrapping_category.setDisabled(True)
        self.scrapping_category.setDisabled(False)
        self.Scrapping_stop_btn.setDisabled(True)
        self.Scrapping_pause_btn.setDisabled(True)
        self.Scrapping_resume_btn.setDisabled(True)
        self.Scrapping_start_btn.setDisabled(False)
        self.Stop = 1

    def pauseScrapping(self):
        self.Scrapping_pause_btn.setDisabled(True)
        self.Scrapping_resume_btn.setDisabled(False)
        self.Scrapping_start_btn.setDisabled(True)
        self.Scrapping_stop_btn.setDisabled(True)
        self.Stop = 1

    def resumeScrapping(self):
        Temp=threading.Thread(target=self.resume)
        Temp.start()
    def resume(self):
        self.Stop=0
        self.Scrapping_resume_btn.setDisabled(True)
        self.Scrapping_start_btn.setDisabled(True)
        self.Scrapping_pause_btn.setDisabled(False)
        self.Scrapping_stop_btn.setDisabled(False)
        if self.category_text == 'Books':
                self.scrapping(self.category_text)
        elif self.category_text == 'Articles':
                self.scrapping(self.category_text)
        

import images_qrc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
